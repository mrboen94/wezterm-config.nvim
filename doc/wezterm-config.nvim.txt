*wezterm-config.nvim.txt*       For NVIM v0.9.0       Last change: 2025 May 23

==============================================================================
Table of Contents                      *wezterm-config.nvim-table-of-contents*

1. wezterm-config.nvim               |wezterm-config.nvim-wezterm-config.nvim|
  - Installation and use|wezterm-config.nvim-wezterm-config.nvim-installation-and-use|
  - Tips                        |wezterm-config.nvim-wezterm-config.nvim-tips|
  - Debugging              |wezterm-config.nvim-wezterm-config.nvim-debugging|

==============================================================================
1. wezterm-config.nvim               *wezterm-config.nvim-wezterm-config.nvim*

Neovim and Wezterm <https://github.com/wez/wezterm> feel like the perfect
match.

Use this plugin to send Wezterm config overrides from within Neovim. This repo
doubles as the source of both the Neovim plugin (`lua/wezterm-config/`) and the
Wezterm plugin (`plugin/`).

Below are instructions and suggestions for setting both pieces up.


INSTALLATION AND USE*wezterm-config.nvim-wezterm-config.nvim-installation-and-use*


NEOVIM ~

Using folke/lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    {
        'winter-again/wezterm-config.nvim',
        config = function()
            -- changing this to true means the plugin will try to append
            -- $HOME/.config/wezterm' to your RTP, meaning you can more conveniently
            -- access modules in $HOME/.config/wezterm/lua/ for using with this plugin
            -- otherwise, store data where you want
            require('wezterm_config').setup({
                -- defaults:
                append_wezterm_to_rtp = false,
            })
        end
    }
<


WEZTERM ~

You can install the Wezterm side of the plugin in one of two ways:


OPTION 1: USING WEZTERM’S PLUGIN SYSTEM (RECOMMENDED)

Wezterm has a built-in system for incorporating remote plugins. Add this to
your `wezterm.lua`:

>lua
    local wezterm = require('wezterm')
    local config = {}
    
    -- Import the plugin
    local override_user_var = wezterm.plugin.require("https://github.com/mrboen94/wezterm-config.nvim").override_user_var
    
    
    wezterm.on("user-var-changed", function(window, pane, name, value)
        local overrides = window:get_config_overrides() or {}
        overrides = override_user_var(overrides, name, value)
        window:set_config_overrides(overrides)
    end)
    
    return config
<


OPTION 2: MANUAL INTEGRATION

If you prefer to keep the plugin configuration separate, create a file named
`wezterm_plugin.lua`:

>lua
    local wezterm = require('wezterm')
    local M = {}
    
    M.override_user_var = require('plugin/init').override_user_var
    
    M.setup = function(config)
        wezterm.on("user-var-changed", function(window, pane, name, value)
            local overrides = window:get_config_overrides() or {}
            overrides = M.override_user_var(overrides, name, value)
            window:set_config_overrides(overrides)
        end)
        return config
    end
    
    return M
<

Then in your main `wezterm.lua`:

>lua
    local wezterm = require('wezterm')
    local config = {}
    
    local wezterm_plugin = require('wezterm_plugin')
    config = wezterm_plugin.setup(config)
    
    return config
<


USAGE EXAMPLES ~

>lua
    -- in Neovim
    local wezterm_config = require('wezterm-config')
    
    -- Change font size
    vim.keymap.set('n', '<leader><leader>f', function()
        wezterm_config.set_wezterm_user_var('font_size', '20')
    end)
    
    -- Change font
    vim.keymap.set('n', '<leader><leader>F', function()
        wezterm_config.set_wezterm_user_var('font', 'JetBrains Mono')
    end)
    
    -- Toggle tab bar visibility
    vim.keymap.set('n', '<leader><leader>t', function()
        wezterm_config.set_wezterm_user_var('hide_tab_bar_if_only_one_tab', 'true')
    end)
    
    -- Set window padding
    vim.keymap.set('n', '<leader><leader>p', function()
        wezterm_config.set_wezterm_user_var('window_padding', '{"left": 0, "right": 0, "top": 0, "bottom": 0}')
    end)
<


TIPS                            *wezterm-config.nvim-wezterm-config.nvim-tips*

For more complex configuration options that take Lua tables as their values
(like `background`), you can pass them as JSON strings:

>lua
    -- Set a complex background configuration
    vim.keymap.set('n', '<leader><leader>b', function()
        local background_config = {
            source = {
                File = "path/to/your/image.jpg"
            },
            width = "100%",
            height = "100%",
            opacity = 0.9
        }
        wezterm_config.set_wezterm_user_var('background', vim.fn.json_encode(background_config))
    end)
<


TMUX ~

The plugin should play nicely with tmux <https://github.com/tmux/tmux>. Make
sure the following setting is in your tmux conf file, as advised by Wez
<https://wezfurlong.org/wezterm/recipes/passing-data.html#user-vars>.

>
    set -g allow-passthrough on
<


DEBUGGING                  *wezterm-config.nvim-wezterm-config.nvim-debugging*


LOGGING ~

To enable detailed logging for debugging, you can modify the event handler to
include logging statements:

>lua
    wezterm.on("user-var-changed", function(window, pane, name, value)
        local overrides = window:get_config_overrides() or {}
        wezterm.log_info("--- User Var Changed ---")
        wezterm.log_info("Name:", name, "| Value:", value, "| Type of value:", type(value))
        wezterm.log_info("Overrides before change:", overrides)
    
        overrides = override_user_var(overrides, name, value)
        
        wezterm.log_info("Final overrides before applying to window:", overrides)
        window:set_config_overrides(overrides)
        wezterm.log_info("--- End User Var Changed ---")
    end)
<


CLEARING OVERRIDES ~

You might want to clear your config overrides, especially if there’s been a
mistake in an override. Add this to your Wezterm config:

>lua
    wezterm.on('clear-overrides', function(window, pane)
        window:set_config_overrides({})
        -- optionally have a small notification pop
        -- the timeout is known to be unreliable
        window:toast_notification('wezterm', 'config overrides cleared', nil, 2000)
    end)
    
    local override_keymap = {
        key = 'X',
        mods = 'CTRL|SHIFT',
        action = wezterm.action.EmitEvent('clear-overrides')
    }
    
    table.insert(config.keys, override_keymap)
<

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
